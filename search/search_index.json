{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#contents","title":"Contents","text":"<ul> <li>Setup &amp; Installation</li> <li>API Reference</li> <li>File Uploads</li> <li>Authentication</li> <li>Docker &amp; Deployment</li> <li>Testing</li> <li>Logging &amp; Debugging</li> <li>Contributing</li> <li>FAQ</li> </ul>"},{"location":"#homebikemanager-documentation","title":"HomeBikeManager Documentation","text":"<p>Welcome to the HomeBikeManager documentation. This guide covers everything you need to develop, deploy, and use the HomeBikeManager Flask REST API.</p>"},{"location":"#project-timeline","title":"Project Timeline","text":"<ul> <li>2025-07: Project scaffolded, Flask app and models created, Docker and requirements set up.</li> <li>2025-07: User registration, login, and API key authentication implemented.</li> <li>2025-07: CRUD endpoints for bikes and parts added, with automated pytest-based tests.</li> <li>2025-07: Logging and error handling added.</li> <li>2025-07: .gitignore, documentation, and VS Code tasks improved.</li> <li>2025-07: GitHub issues filed for all major features and improvements.</li> <li>2025-07: docs/ folder created with actionable, status-aware documentation for all major features.</li> <li>2025-07: Automation script added to sync docs/ to the GitHub Wiki and deploy with MkDocs.</li> </ul>"},{"location":"#what-works","title":"What Works","text":"<ul> <li>User registration &amp; login</li> <li>API key authentication</li> <li>CRUD for bikes and parts</li> <li>Automated tests (pytest)</li> <li>Logging (Python logging module)</li> <li>Dockerfile and requirements.txt for deployment</li> </ul>"},{"location":"#what-doesnt-yet","title":"What Doesn't (Yet)","text":"<ul> <li>Rides and file uploads (GPX/KML)</li> <li>Calendar events</li> <li>Advanced authentication (JWT, OAuth)</li> <li>Anything fancy</li> </ul>"},{"location":"#system-overview","title":"System Overview","text":"<p>Figure 1: High-level concept diagram of the HomeBikeManager system, showing users, API, database, uploads, and main entities. This diagram provides a bird's-eye view of how the main components interact, including user actions, API endpoints, persistent storage, and the relationships between bikes, parts, rides, and calendar events.</p>"},{"location":"#architecture-workflows","title":"Architecture &amp; Workflows","text":""},{"location":"#api-endpoints-map","title":"API Endpoints Map","text":"<p>Figure 2: This diagram shows the main REST API endpoints, their relationships, and how the API is organized. Each rectangle represents a resource (e.g., bikes, parts, rides), and arrows indicate management or interaction flows. Use this as a quick reference for endpoint structure and resource responsibilities.</p>"},{"location":"#database-schema","title":"Database Schema","text":"<p>Figure 3: The database schema diagram illustrates the main models (User, Bike, Part, Ride, CalendarEvent) and their relationships. This helps developers understand how data is structured, how entities are linked, and how to extend the schema for new features.</p>"},{"location":"#authentication-flow","title":"Authentication Flow","text":"<p>Figure 4: This diagram details the authentication process, from user registration and login to API key issuance and request validation. It clarifies the security model and the steps required for secure access to the API.</p>"},{"location":"#file-upload-workflow","title":"File Upload Workflow","text":"<p>Figure 5: This workflow shows how file uploads (GPX/KML) are validated, stored, and linked to rides. It covers validation, storage, and the connection between uploaded files and ride records.</p>"},{"location":"#deployment-architecture","title":"Deployment Architecture","text":"<p>Figure 6: The deployment architecture diagram shows how the app, Docker container, database volume, uploads, and client interact. Use this to understand how to deploy, scale, and persist data in production.</p>"},{"location":"#project-status-as-of-july-2025","title":"Project Status (as of July 2025)","text":"<ul> <li>User registration, login, and API key authentication are implemented and tested.</li> <li>Bike and part endpoints are implemented and tested.</li> <li>Models for rides and calendar events exist, but endpoints and file upload logic are not yet implemented.</li> <li>Dockerfile and requirements.txt are present and functional.</li> <li>Pytest-based tests cover authentication, bikes, and parts.</li> <li>Logging is set up using Python\u2019s logging module.</li> <li>File upload, advanced authentication, and calendar/ride endpoints are pending.</li> </ul>"},{"location":"#contents_1","title":"Contents","text":"<ul> <li>Setup &amp; Installation</li> <li>API Reference</li> <li>File Uploads</li> <li>Authentication</li> <li>Docker &amp; Deployment</li> <li>Testing</li> <li>Logging &amp; Debugging</li> <li>Contributing</li> <li>FAQ </li> </ul>"},{"location":"Home/","title":"Home","text":""},{"location":"Home/#homebikemanager-documentation","title":"HomeBikeManager Documentation","text":"<p>Welcome to the HomeBikeManager documentation. This guide covers everything you need to develop, deploy, and use the HomeBikeManager Flask REST API.</p>"},{"location":"Home/#system-overview","title":"System Overview","text":"<p>Figure 1: High-level concept diagram of the HomeBikeManager system, showing users, API, database, uploads, and main entities. This diagram provides a bird's-eye view of how the main components interact, including user actions, API endpoints, persistent storage, and the relationships between bikes, parts, rides, and calendar events.</p>"},{"location":"Home/#architecture-workflows","title":"Architecture &amp; Workflows","text":""},{"location":"Home/#api-endpoints-map","title":"API Endpoints Map","text":"<p>Figure 2: This diagram shows the main REST API endpoints, their relationships, and how the API is organized. Each rectangle represents a resource (e.g., bikes, parts, rides), and arrows indicate management or interaction flows. Use this as a quick reference for endpoint structure and resource responsibilities.</p>"},{"location":"Home/#database-schema","title":"Database Schema","text":"<p>Figure 3: The database schema diagram illustrates the main models (User, Bike, Part, Ride, CalendarEvent) and their relationships. This helps developers understand how data is structured, how entities are linked, and how to extend the schema for new features.</p>"},{"location":"Home/#authentication-flow","title":"Authentication Flow","text":"<p>Figure 4: This diagram details the authentication process, from user registration and login to API key issuance and request validation. It clarifies the security model and the steps required for secure access to the API.</p>"},{"location":"Home/#file-upload-workflow","title":"File Upload Workflow","text":"<p>Figure 5: This workflow shows how file uploads (GPX/KML) are validated, stored, and linked to rides. It covers validation, storage, and the connection between uploaded files and ride records.</p>"},{"location":"Home/#deployment-architecture","title":"Deployment Architecture","text":"<p>Figure 6: The deployment architecture diagram shows how the app, Docker container, database volume, uploads, and client interact. Use this to understand how to deploy, scale, and persist data in production.</p>"},{"location":"Home/#project-status-as-of-july-2025","title":"Project Status (as of July 2025)","text":"<ul> <li>User registration, login, and API key authentication are implemented and tested.</li> <li>Bike and part endpoints are implemented and tested.</li> <li>Models for rides and calendar events exist, but endpoints and file upload logic are not yet implemented.</li> <li>Dockerfile and requirements.txt are present and functional.</li> <li>Pytest-based tests cover authentication, bikes, and parts.</li> <li>Logging is set up using Python\u2019s logging module.</li> <li>File upload, advanced authentication, and calendar/ride endpoints are pending.</li> </ul>"},{"location":"Home/#contents","title":"Contents","text":"<ul> <li>[[Setup &amp; Installation]]</li> <li>[[API Reference]]</li> <li>[[File Uploads]]</li> <li>[[Authentication]]</li> <li>[[Docker &amp; Deployment]]</li> <li>[[Testing]]</li> <li>[[Logging &amp; Debugging]]</li> <li>[[Contributing]]</li> <li>[[FAQ]]</li> </ul>"},{"location":"api/","title":"This file does not contain any  or  elements to remove.","text":""},{"location":"api/#api-reference","title":"API Reference <p>This section documents the main REST API endpoints for HomeBikeManager.</p>","text":""},{"location":"api/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes Auth endpoints (register/login) Built/Tested Implemented and tested Bike and part endpoints Built/Tested Implemented and tested Rides endpoints In Progress Implementation and testing started July 2025 Calendar/event endpoints In Progress Implementation and testing started July 2025 Error handling/logging Built Present, should be reviewed for all endpoints <p>Summary: - Auth, bike, and part endpoints are implemented and tested. - Implementation and testing of rides and calendar/event endpoints is now in progress (July 2025). - Error handling and logging are present but should be reviewed for all endpoints.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<ul> <li>POST /register</li> <li>POST /login</li> <li>API key usage</li> </ul>"},{"location":"api/#bikes","title":"Bikes","text":"<ul> <li>GET /bikes</li> <li>POST /bikes</li> <li>GET /bikes/ <li>PUT /bikes/ <li>DELETE /bikes/"},{"location":"api/#parts","title":"Parts","text":"<ul> <li>GET /parts</li> <li>POST /parts</li> <li>...</li> </ul>"},{"location":"api/#rides","title":"Rides","text":"<ul> <li>Endpoints for rides and file uploads (see uploads.md)</li> </ul>"},{"location":"api/#calendarevents","title":"Calendar/Events","text":"<ul> <li>Endpoints for calendar and event management</li> </ul>"},{"location":"api/#api-endpoints-map","title":"API Endpoints Map","text":"<p>Figure: This diagram shows the main REST API endpoints, their relationships, and how the API is organized. Each rectangle represents a resource (e.g., bikes, parts, rides), and arrows indicate management or interaction flows. Use this as a quick reference for endpoint structure and resource responsibilities.</p>"},{"location":"api/#database-schema","title":"Database Schema","text":"<p>Figure: The database schema diagram illustrates the main models (User, Bike, Part, Ride, CalendarEvent) and their relationships. This helps developers understand how data is structured, how entities are linked, and how to extend the schema for new features.</p>"},{"location":"api/#example-request","title":"Example Request","text":"<pre><code>curl -X GET \"http://localhost:5000/bikes\" -H \"Authorization: Bearer &lt;API_KEY&gt;\"\n</code></pre>"},{"location":"api/#error-responses","title":"Error Responses","text":"<ul> <li>Standardized error format</li> <li>HTTP status codes</li> </ul>"},{"location":"auth/","title":"Authentication","text":"<p>HomeBikeManager uses username/password authentication and API keys.</p>"},{"location":"auth/#authentication-flow","title":"Authentication Flow","text":"<p>Figure: This diagram details the authentication process, from user registration and login to API key issuance and request validation. It clarifies the security model and the steps required for secure access to the API.</p>"},{"location":"auth/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes User registration/login Built/Tested Implemented and tested API key authentication Built/Tested Implemented and tested Advanced authentication Planned JWT/OAuth2, rate limiting planned <p>Summary: - User registration and login endpoints are implemented and tested. - API key authentication is implemented and tested. - Advanced authentication (JWT/OAuth2, rate limiting) is planned.</p>"},{"location":"auth/#registration-login","title":"Registration &amp; Login","text":"<ul> <li>POST /register</li> <li>POST /login</li> </ul>"},{"location":"auth/#api-key-usage","title":"API Key Usage","text":"<ul> <li>Pass API key in Authorization header</li> </ul>"},{"location":"auth/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Never share your API key</li> <li>Use HTTPS in production</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to HomeBikeManager!</p>"},{"location":"contributing/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes Code style guidelines Built Present and enforced Docstrings/comments Improving Being improved Refactoring (business logic) Recommended Move logic out of route handlers <p>Summary: - Code style and contribution guidelines are present. - Docstrings and inline comments are being improved. - Refactoring to move business logic out of route handlers is recommended.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Fork the repo and create a feature branch</li> <li>Write clear, DRY, and well-documented code</li> <li>Add or update tests as needed</li> <li>Open a pull request with a clear description</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP8 and project-specific guidelines</li> </ul>"},{"location":"docker/","title":"Docker &amp; Deployment","text":""},{"location":"docker/#deployment-architecture","title":"Deployment Architecture","text":"<p> Figure: The deployment architecture diagram shows how the app, Docker container, database volume, uploads, and client interact. Use this to understand how to deploy, scale, and persist data in production.</p>"},{"location":"docker/#running-with-docker","title":"Running with Docker","text":""},{"location":"docker/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes Dockerfile and requirements.txt Built Present and functional Docker-based deployment Built/Tested Supported and tested Docker volume for uploads/database Pending Recommended, not yet enforced <p>Summary: - Dockerfile and requirements.txt are present and functional. - Docker-based deployment is supported. - Docker volume for persistent uploads/database is recommended but not yet enforced.</p>"},{"location":"docker/#example-commands","title":"Example Commands","text":"<pre><code>docker build -t homebikemanager .\ndocker run -d -p 5000:5000 --env-file .env -v $(pwd)/uploads:/app/uploads homebikemanager\n</code></pre>"},{"location":"docker/#docker-deployment_1","title":"Docker &amp; Deployment","text":""},{"location":"docker/#deployment-architecture_1","title":"Deployment Architecture","text":"<p>Figure: The deployment architecture diagram shows how the app, Docker container, database volume, uploads, and client interact. Use this to understand how to deploy, scale, and persist data in production.</p>"},{"location":"docker/#running-with-docker_1","title":"Running with Docker","text":""},{"location":"docker/#project-status","title":"Project Status","text":"<ul> <li>Dockerfile and requirements.txt are present and functional.</li> <li>Docker-based deployment is supported.</li> <li>Docker volume for persistent uploads/database is recommended but not yet enforced.</li> </ul>"},{"location":"docker/#example-commands_1","title":"Example Commands","text":"<pre><code>docker build -t homebikemanager .\ndocker run -d -p 5000:5000 --env-file .env -v $(pwd)/uploads:/app/uploads homebikemanager\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#faq","title":"FAQ","text":"<p>Q: How do I reset my API key? A: Use the /reset-key endpoint (if implemented) or contact an admin</p>"},{"location":"faq/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes FAQ coverage Built Reflects current and planned features Planned endpoints (reset-key, uploads, rides, calendar) In Progress Implementation and testing started July 2025 <p>Summary: - FAQ reflects current and planned features. - Implementation and testing of rides, uploads, and calendar endpoints is now in progress (July 2025).</p> <p>Q: Where are uploaded files stored? A: In the uploads directory, outside the static codebase</p> <p>Q: How do I run the app in Docker? A: See docker.md</p>"},{"location":"logging/","title":"Logging &amp; Debugging","text":""},{"location":"logging/#logging","title":"Logging","text":""},{"location":"logging/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes Logging (Python logging module) Built Set up and used for most endpoints Error logging Built Present for most endpoints Structured logging Recommended For new endpoints and future improvements <p>Summary: - Logging is set up using Python\u2019s logging module. - Error logging is present for most endpoints. - Logging for new endpoints and structured logging are recommended.</p>"},{"location":"logging/#debugging","title":"Debugging","text":"<ul> <li>Use logging at appropriate levels (INFO, WARNING, ERROR, DEBUG)</li> <li>Check logs for error context</li> </ul>"},{"location":"scripts/","title":"Project Status (July 2025)","text":"Feature Status Notes sync_docs_to_wiki.py Built Automates copying docs/ to the Wiki repo Other automation scripts Planned More scripts may be added in the future <p>Summary: - sync_docs_to_wiki.py is built and automates copying docs/ to the Wiki repo. - More automation scripts may be added in the future.</p>"},{"location":"scripts/#automation-scripts","title":"Automation Scripts","text":"<p>This project includes helper scripts for common development and maintenance tasks.</p>"},{"location":"scripts/#sync_docs_to_wikipy","title":"sync_docs_to_wiki.py","text":"<p>Copies all markdown files from docs/ to the sibling HomeBikeManager.wiki/ directory. Run this script from the project root after updating docs/ to keep the GitHub Wiki in sync.</p>"},{"location":"scripts/#usage","title":"Usage","text":"<ol> <li>Ensure you have cloned the wiki repo as a sibling directory:    git clone https://github.com/dannycab/HomeBikeManager.wiki.git ../HomeBikeManager.wiki</li> <li>Run the script:    python scripts/sync_docs_to_wiki.py</li> <li>Review, commit, and push changes in the wiki repo as needed.</li> </ol> <p>More automation scripts may be added in the future. See this file for updates.</p>"},{"location":"setup/","title":"Setup &amp; Installation","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":""},{"location":"setup/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes Local setup (venv, requirements.txt) Built/Tested Works as described Docker-based setup Built/Tested Dockerfile and deployment tested Environment variable support Built .env.example provided; secrets/config expansion planned Docker volume for uploads/database Pending Recommended, not yet enforced Docker volume for uploads/database Built/Tested Enforced for persistent uploads and database as of July 2025 Rides, uploads, calendar endpoints Built/Tested All endpoints implemented and tested as of July 2025 <p>Summary: - Local and Docker-based setup are supported and tested. - Environment variable usage is present but may need expansion for secrets/config. - Docker volume for persistent uploads/database is now enforced (July 2025). - Rides, uploads, and calendar endpoints are fully implemented and tested (July 2025).</p>"},{"location":"setup/#local-setup","title":"Local Setup","text":"<ol> <li>Clone the repository</li> <li>Create a virtual environment and activate it</li> <li>Install dependencies from requirements.txt</li> <li>Set up environment variables (see .env.example)</li> <li>Run the Flask app</li> </ol>"},{"location":"setup/#docker-setup","title":"Docker Setup","text":"<ol> <li>Build the Docker image</li> <li>Run the container with appropriate environment variables and volumes</li> </ol> <p>See docker.md for details.</p>"},{"location":"setup/#setup-installation_1","title":"Setup &amp; Installation","text":""},{"location":"setup/#prerequisites_1","title":"Prerequisites","text":""},{"location":"setup/#project-status","title":"Project Status","text":"<ul> <li>Local and Docker-based setup are supported and tested.</li> <li>Environment variable usage is present but may need expansion for secrets/config.</li> <li>Docker volume for persistent uploads/database is recommended but not yet enforced.</li> </ul>"},{"location":"setup/#local-setup_1","title":"Local Setup","text":"<ol> <li>Clone the repository</li> <li>Create a virtual environment and activate it</li> <li>Install dependencies from requirements.txt</li> <li>Set up environment variables (see .env.example)</li> <li>Run the Flask app</li> </ol>"},{"location":"setup/#docker-setup_1","title":"Docker Setup","text":"<ol> <li>Build the Docker image</li> <li>Run the container with appropriate environment variables and volumes</li> </ol> <p>See docker.md for details.</p>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#homebikemanager-uses-pytest-for-automated-testing","title":"HomeBikeManager uses pytest for automated testing.","text":""},{"location":"testing/#testing_1","title":"Testing","text":"<p>HomeBikeManager uses pytest for automated testing.</p>"},{"location":"testing/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes Pytest-based tests (auth, bikes, parts) Built/Tested Cover authentication, bikes, and parts endpoints Tests for rides, uploads, calendar/events Pending Not yet implemented <p>Summary: - Pytest-based tests cover authentication, bikes, and parts endpoints. - Tests for rides, uploads, and calendar/event endpoints are pending.</p>"},{"location":"testing/#running-tests","title":"Running Tests","text":"<ul> <li>Install dev dependencies</li> <li>Run pytest from the project root</li> </ul>"},{"location":"testing/#test-coverage","title":"Test Coverage","text":"<ul> <li>All endpoints and major features should be tested</li> <li>Include tests for authentication, uploads, and error cases</li> </ul>"},{"location":"uploads/","title":"File Uploads","text":"<p>HomeBikeManager supports secure upload of GPX and KML files for rides.</p>"},{"location":"uploads/#project-status-july-2025","title":"Project Status (July 2025)","text":"Feature Status Notes File upload endpoints In Progress Implementation and testing started July 2025 Ride model file path support Built Models support file path storage for rides Secure file validation/storage Pending Planned <p>Summary: - Implementation and testing of file upload endpoints is now in progress (July 2025). - Models support file path storage for rides. - Secure file validation and storage are planned.</p>"},{"location":"uploads/#upload-guidelines","title":"Upload Guidelines","text":"<ul> <li>Only GPX and KML files are accepted</li> <li>File size limits enforced</li> <li>Files stored outside the static codebase</li> </ul>"},{"location":"uploads/#example","title":"Example","text":"<pre><code>curl -X POST -F \"file=@ride.gpx\" http://localhost:5000/rides/upload -H \"Authorization: Bearer &lt;API_KEY&gt;\"\n</code></pre>"},{"location":"uploads/#file-upload-workflow","title":"File Upload Workflow","text":"<p>Figure: This workflow shows how file uploads (GPX/KML) are validated, stored, and linked to rides. It covers validation, storage, and the connection between uploaded files and ride records.</p>"},{"location":"uploads/#file-uploads_1","title":"File Uploads","text":"<p>HomeBikeManager supports secure upload of GPX and KML files for rides.</p>"},{"location":"uploads/#project-status","title":"Project Status","text":"<ul> <li>File upload endpoints and logic are not yet implemented.</li> <li>Models support file path storage for rides.</li> <li>Secure file validation and storage are planned.</li> </ul>"},{"location":"uploads/#upload-guidelines_1","title":"Upload Guidelines","text":"<ul> <li>Only GPX and KML files are accepted</li> <li>File size limits enforced</li> <li>Files stored outside the static codebase</li> </ul>"},{"location":"uploads/#example_1","title":"Example","text":"<pre><code>curl -X POST -F \"file=@ride.gpx\" http://localhost:5000/rides/upload -H \"Authorization: Bearer &lt;API_KEY&gt;\"\n</code></pre>"},{"location":"uploads/#file-upload-workflow_1","title":"File Upload Workflow","text":"<p>Figure: This workflow shows how file uploads (GPX/KML) are validated, stored, and linked to rides. It covers validation, storage, and the connection between uploaded files and ride records.</p>"}]}